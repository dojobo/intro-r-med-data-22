---
title: "Session 2"
subtitle: "Data wrangling"
author: "Dominic Bordelon, Research Data Librarian, University of Pittsburgh Library System"
date: "June 21, 2022"
format: 
  gfm: default
  html: default
editor: visual
---

```{r}
#| output: false

library(tidyverse)
library(medicaldata)
library(readxl)
library(writexl)
```

# Session 2: Data wrangling

![Artwork by \@allison_horst](assets/data_cowboy.png){fig-alt="A green fuzzy monster in a cowboy hat and mustache, lassoing a group of unruly data tables while riding a blue fuzzy monster." fig-align="center"}

## Agenda

1.  Pipes in R
2.  Selecting columns; filtering and sorting rows
3.  Creating new columns
4.  Grouping and summarizing
5.  Random sampling of rows
6.  Data cleaning: tidy data, missing values
7.  Exporting data from R

Most of what we are doing today is in the {dplyr} and {tidyr} packages. These PDF cheat sheets are a handy reference: [dplyr](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf), [tidyr](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf)

## Pipes in R

The **pipe** is an operator, written **`%>%`**, that enables us to pass the output from one function, into another function. Consider:

```{r}
my_values <- -1:-10    # -1 to -10, as a vector
my_values

# below i take the absolute value, then the square root, 
# then round to 3 decimal places, then calculate the mean
mean(round(sqrt(abs(my_values)), 3))

# with a pipe, this can be rewritten as:
my_values %>% 
  abs() %>% 
  sqrt() %>% 
  round(3) %>%
  mean()

# more readable, right?
```

The keyboard shortcut for `%>%` is **Ctrl+Shift+M** (Windows) or **Cmd+Shift+M** (macOS).

You might also see a newer notation for the pipe, `|>`. It works the same way:

```{r}
my_values |>
  abs() |>
  sqrt() |>
  round(3) |>
  mean()
```

We'll be using the first pipe, also called "the magrittr pipe" after the package it comes from.

![magrittr logo](assets/magrittr.png){fig-alt="magrittr logo" fig-align="center"}

## Looking at data frames

`print()`, str()`,`View()`,`summary()\`

```{r}
cvdrisk <- read_csv("data/genoData.csv")
cvdrisk %>% print()
```

Get a histogram of a variable

```{r}
ggplot(cvdrisk, aes(sbp)) + geom_histogram()
```

## Selecting columns; filtering and sorting rows

### `select()`: which columns?

```{r}
cvdrisk
str(cvdrisk)    # 17 variables (columns)

cvdrisk %>% 
  select(numAge, gender, bmi, treat)

# how many columns do we have? how many rows?
# notice that the column order is also different

# you can also select using index numbers:
cvdrisk %>%
  select(3:7)

```

### `filter()`: which rows?

![Artwork by \@allison_horst](assets/dplyr_filter.jpg){fig-alt="Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.”" fig-align="center"}

```{r}
cvdrisk %>%
  filter(numAge == 19) %>% 
  select(patientID, numAge, smoking)

cvdrisk %>%
  filter(tchol > 200)

# comparisons: > >= < <= == !=


# check multiple values with the %in% operator, and a vector:
cvdrisk %>%
  filter(race %in% c("Black/AfAm", "AmInd"))
cvdrisk %>% 
  distinct(race)
# BMI is between 25 and 30 (inclusive):
cvdrisk %>%
  filter(between(bmi, 25, 30))
```

Multiple conditions can be combined with the symbols `&` (ampersand, "AND") and `|` (vertical pipe, "OR").

```{r}
cvdrisk %>% 
  filter(between(numAge, 19, 24) & smoking == "Y")

cvdrisk %>% 
  filter(between(numAge, 19, 24) | smoking == "Y")
```

### `arrange()`: in what order should the rows appear?

```{r}
# sort by numAge:
cvdrisk %>% 
  filter(between(bmi, 25, 26)) %>% 
  arrange(numAge)

# sort by numAge, descending (oldest first):
cvdrisk %>% 
  filter(between(bmi, 25, 26)) %>% 
  arrange(desc(numAge))

# sort by multiple columns:
cvdrisk %>% 
  arrange(numAge, desc(bmi))
```

## Exercise 1

1.  Using `filter()`, get patients aged 30+ whose systolic blood pressure is greater than 135. Store this set as an object called `high_bp`.

```{r}
high_bp <- cvdrisk %>% filter(numAge >= 30 & sbp > 135)
```

2.  Sort `high_bp` according to numeric age and systolic blood pressure.

```{r}
high_bp %>% 
  arrange(numAge, sbp) %>% View()
```

3.  Why doesn't the code below work? Can you fix it?

```{r}
#| eval: false

cvdrisk %>% 
  select(age, htn, treat, smoking, race, t2d, gender, bmi) %>% 
  filter(t2d == "Y") %>% 
  arrange(numAge)
```

## `mutate()`: Creating new columns

![Artwork by \@allison_horst](assets/dplyr_mutate.png){fig-alt="Cartoon of cute fuzzy monsters dressed up as different X-men characters, working together to add a new column to an existing data frame. Stylized title text reads “dplyr::mutate - add columns, keep existing.”" fig-align="center"}

Example using the `smartpill` dataset:

```{r}
str(smartpill)
smartpill %>% 
  select(1:6) %>% 
  mutate(BMI = Height / Weight^2)
```

## Grouping and summarizing

Often, our observations can be arranged into interesting *groups*, typically based on a categorical variable (e.g., gender, race, age group, treatment). Our next step is usually to *summarize* those groups: how many observations in each group? What are the median and mean values, standard deviation, etc.?

Available summarizing functions:

-   `n()`, `n_distinct()`
-   `mean()`, `median()`, `sum()`
-   `quantile()`, `min()`, `max()`, `IQR()`, `sd()`, `var()`

```{r}
cvdrisk %>%
  group_by(smoking) %>%
  summarize(n(), mean(numAge), mean(bmi), mean(sbp), mean(tchol))

# pause here for students to try

```

```{r}
# or to apply the same summary function across() columns:
cvdrisk %>%
  group_by(smoking) %>%
  summarize(n(), across(c(numAge, bmi, sbp, tchol), mean))
```

![Artwork by \@allison_horst](assets/dplyr_across.png){fig-alt="A cute round fuzzy monster with fairy wings and a wand, with a party hat on reading “mean”, bouncing across the top of a data table applying the function to each column. Stylized text reads: “dplyr::across() - use within mutate() or summarize() to apply function(s) to a selection of columns!” An example shows the use within summarize: summarize(across(where(is.numeric), mean))."}

## `slice_sample()`: Random sampling of rows

meaning of "slice"

```{r}
cvdrisk %>% 
  slice_sample(prop=0.2)

```

## Data cleaning: tidy data, missing values

When a dataset doesn't have one observation per row and/or one variable per column, we need to **reshape** it using `{tidyr}`.

![Artwork by \@allison_horst](assets/tidydata_1.jpg){fig-alt="Stylized text providing an overview of Tidy Data. The top reads “Tidy data is a standard way of mapping the meaning of a dataset to its structure. - Hadley Wickham.” On the left reads “In tidy data: each variable forms a column; each observation forms a row; each cell is a single measurement.” There is an example table on the lower right with columns ‘id’, ‘name’ and ‘color’ with observations for different cats, illustrating tidy data structure."}

In `table2`, one column shows `type` (of measurement), either "cases" or "population."

```{r}
View(table2)
```

We can use the information in `type` to make two new columns, `cases` and `population`, which hold the value of `count`. We do this with `pivot_wider()`:

```{r}
table2 %>% 
  pivot_wider(names_from=type, values_from=count)
```

In contrast, `table4a` has a column for each year; we would like to move year information into its own column, and reduce the overall number of columns to make the table "longer"---`pivot_longer()`.

```{r}
table4a

table4a %>% 
  pivot_longer(cols=c(`1999`, `2000`), names_to="year", values_to="cases")
```

## Exporting data from R

### Saving as CSV (readr)

```{r}
write_csv(high_bp, "high-bp.csv")
```

### Saving as XLSX

```{r}
write_xlsx(high_bp, "high-bp.xlsx")
```

### Saving as RDS and RData

.RDS and .RData are two file formats specific to R.

-   **RDS**, "R data structure" (I think), is for saving an R *object* (e.g., data frame) to disk. This file will be smaller than a CSV or XLSX and faster to load/save in R. This makes it a good choice for saving a dataset you're working on.
-   **RData** is for saving your R *session* (Environment pane) to disk. Upon starting a session, this can be a faster way to restore your workspace than running your entire notebook again.

To save an object as RDS:

```{r}
saveRDS(cvdrisk, "data/cvdrisk.RDS")
```

To load an RDS file into an R object:

```{r}
loaded_cvdrisk <- readRDS("data/cvdrisk.RDS")

# what does this loaded RDS look like?
str(loaded_cvdrisk)
```

To work with .RData files, the easiest way is to use the load/save icons at top left of the Environment pane .

There is also an RStudio save-on-exit feature which preserves your session (as a .RData), so that next time you open RStudio, you can pick up where you left off. This is convenient, but requires diligent notebook accounting.

![Tools \> Global Options... \> General](assets/config-rdata.png){fig-alt="Cropped screenshot of RStudio's global option. The selection is titled Workspace. There is a checkbox labeled \"Restore .RData into workspace at startup\". The box is unchecked. There is a drop-down menu reading \"Save workspace to .RData on exit:\". The option \"Never\" is selected." fig-align="center"}

## Next steps

-   Problem Set 2
-   Next time: data visualization!
